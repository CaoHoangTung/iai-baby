_target_: src.datamodules.baby_segment_localized_datamodule.BabySegmentLocalizedDataModule
data_dir: ${paths.data_dir}
batch_size: 4
num_workers: 8
pin_memory: false
image_max_size: [960, 1728]
# resize_input: null
white_pixel: [253, 231, 36, 255]
lazy_load: true
wandb_project: "baby"
wandb_artifact: "baby-team/baby/baby:v2"

# List of preprocess
# The preprocess will be applied to the original image first and foremost
image_preprocessor:
  _target_: torchvision.transforms.transforms.Compose
  transforms:
  - _target_: src.models.preprocess.CustomAlbumentation.AlbumentationWrapper
    transform:
      _target_: albumentations.PadIfNeeded
      min_height: 960
      min_width: 1728
  - _target_: src.models.preprocess.CustomAlbumentation.AlbumentationWrapper
    transform:
      _target_: albumentations.CenterCrop
      height: 800
      width: 1024
  - _target_: src.models.preprocess.CustomAlbumentation.AlbumentationWrapper
    transform:
      _target_: albumentations.Resize
      height: 320
      width: 544
label_preprocessor: 
  _target_: torchvision.transforms.transforms.Compose
  transforms:
  - _target_: src.models.preprocess.CustomAlbumentation.AlbumentationWrapper
    transform:
      _target_: albumentations.PadIfNeeded
      min_height: 960
      min_width: 1728
  - _target_: src.models.preprocess.CustomAlbumentation.AlbumentationWrapper
    transform:
      _target_: albumentations.CenterCrop
      height: 800
      width: 1024
  - _target_: src.models.preprocess.CustomAlbumentation.AlbumentationWrapper
    transform:
      _target_: albumentations.Resize
      height: 320
      width: 544

# List of augmentations
# The transformed dataset will have the additional images
# For example, if transforms = [{transformA}, {transformB}],
# then the final images will have (..., originalImageX, transformA(originalImageX), transformB(originalImageY), ...)
# Format: [[AugmentObject, applyToImage, applyToLabel]]
augmentations: [
  [
    [{
      _target_: src.datamodules.components.augmentations.MultiRandomErasing,
      p: 0.5,
      repeat: [5, 15]
    }, true, false],
    [{
      _target_: torchvision.transforms.RandomHorizontalFlip,
      p: 0.5,
    }, true, true],
        [{
      _target_: torchvision.transforms.RandomVerticalFlip,
      p: 0.5,
    }, true, true],
        [{
      _target_: torchvision.transforms.RandomRotation,
      degrees: 5,
    }, true, true],
  ],
]